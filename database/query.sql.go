// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const craeteAccount = `-- name: CraeteAccount :one
INSERT INTO accounts (
  username, password, email
) VALUES (
  ?, ?, ?
)
RETURNING username
`

type CraeteAccountParams struct {
	Username string
	Password string
	Email    string
}

func (q *Queries) CraeteAccount(ctx context.Context, arg CraeteAccountParams) (string, error) {
	row := q.db.QueryRowContext(ctx, craeteAccount, arg.Username, arg.Password, arg.Email)
	var username string
	err := row.Scan(&username)
	return username, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE username = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, username)
	return err
}

const getAccountPassword = `-- name: GetAccountPassword :one
SELECT password FROM accounts
WHERE username = ?
`

func (q *Queries) GetAccountPassword(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getAccountPassword, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getAccountUsername = `-- name: GetAccountUsername :one
SELECT username FROM accounts
WHERE username = ?
`

func (q *Queries) GetAccountUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getAccountUsername, username)
	err := row.Scan(&username)
	return username, err
}
